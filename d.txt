Array

#include <stdio.h>
#include <stdlib.h>
#define MAX 5
int a[MAX], pos, elem; 
int n = 0;
void create();
void display(); 
void insert(); 
void del();
int main() {
    int choice;
    while (1) {	
        printf("\n\n~~~~MENU~~~~"); 
        printf("\n=>1. Create an array of N integers"); 
        printf("\n=>2. Display of array elements"); 
        printf("\n=>3. Insert ELEM at a given POS");
        printf("\n=>4. Delete an element at a given POS"); 
        printf("\n=>5. Exit");
        printf("\n Enter your choice: "); 
        scanf("%d", &choice); 
        switch (choice) {	
            case 1: create(); break;
            case 2: display(); break;
            case 3: insert(); break;
            case 4: del(); break;
            case 5: exit(0); break;
            default: printf("\nPlease enter a valid choice:");
        }
    }
}

void create() {
    int i;
    printf("\n Enter the number of elements: "); 
    scanf("%d", &n);
    printf("\n Enter the elements: "); 
    for (i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }	
}
void display() {
    int i;
    if (n == 0) {
        printf("\n No elements to display"); 
        return;
    }
    printf("\nArray elements are: "); 
    for (i = 0; i < n; i++)
        printf("%d\t", a[i]);
}
void insert() {
    int i;
    if (n == MAX) {
        printf("\nArray is full. Insertion is not possible"); 
        return;
    }
    do {
        printf("\n Enter a valid position where element to be inserted: "); 
        scanf("%d", &pos);
    } while (pos > n);
    printf("\n Enter the value to be inserted: "); 
    scanf("%d", &elem);
    for (i = n - 1; i >= pos; i--) {
        a[i + 1] = a[i];
    }
    a[pos] = elem; 
    n = n + 1; 
    display();
}
void del() {
    int i;
    if (n == 0) {
        printf("\nArray is empty and no elements to delete"); 
        return;
    }
    do {
        printf("\n Enter a valid position from where element to be deleted: "); 
        scanf("%d", &pos);
    } while (pos >= n);
    elem = a[pos];
    printf("\n Deleted element is: %d\n", elem); 
    for (i = pos; i < n - 1; i++) {
        a[i] = a[i + 1];
    }
    n = n - 1;
    display();
}

stack

#include <stdio.h>
#include <stdlib.h>
#define MAX 5

int s[MAX]; 
int top = -1;

void push(int item); 
int pop();
void display();

int main() {
    int choice, item; 
    while (1) {
        printf("\n\n~~~~~~Menu~~~~~~ : ");
        printf("\n=>1.Push an Element to Stack"); 
        printf("\n=>2.Pop an Element from Stack"); 
        printf("\n=>3.Display Stack"); 
        printf("\n=>4.Exit");
        printf("\n Enter your choice: "); 
        scanf("%d", &choice); 
        switch (choice) {
            case 1: 
                printf("\n Enter an element to be pushed: "); 
                scanf("%d", &item);
                push(item);
                break;
            case 2: 
                item = pop(); 
                if (item != -1)
                    printf("\n Element popped is: %d", item);
                break;	
            case 3: 
                display(); 
                break;
            case 4: 
                exit(1);
            default: 
                printf("\n Please enter valid choice"); 
        }
    }	
}
void push(int item) {
    if (top == MAX - 1) {
        printf("\n~~~~Stack overflow~~~~"); 
        return;
    }	
    top = top + 1; 
    s[top] = item;
}
int pop() {
    int item;
    if (top == -1) {	
        printf("\n~~~~Stack underflow~~~~"); 
        return -1;
    }
    item = s[top];  	

infix to post

#include <stdio.h>
#include <ctype.h>
char s[20];
int top = -1;
void push(char);
char pop();
int prior(char);
int main() {
    char infix[20], postfix[20];
    int i, j = 0;
    printf("Enter the infix expression: ");
    scanf("%s", infix);
    push('#');
    for (i = 0; infix[i] != '\0'; i++) {
        if (isalnum(infix[i]))
            postfix[j++] = infix[i];
        else if (infix[i] == '(')
            push(infix[i]);
        else if (infix[i] == ')') {
            while (s[top] != '(')
                postfix[j++] = pop();
            pop();
        } else {
            while (prior(s[top]) >= prior(infix[i]))
                postfix[j++] = pop();
            push(infix[i]);
        }
    }
    while (s[top] != '#')
        postfix[j++] = pop();
    postfix[j] = '\0';
    printf("Postfix expression is: %s\n", postfix);
    return 0;
}
void push(char x) {
    s[++top] = x;
}
char pop() {
    return (s[top--]);
}
int prior(char x) {
    if (x == '^') return 3;
    if (x == '*' || x == '%' || x == '/') return 2;
    if (x == '+' || x == '-') return 1;
    if (x == '(' || x == '#') return 0;
}

post

#include <stdio.h>
#include <ctype.h>
#include <math.h>
int s[20];
int top = -1;
void push(int);
int pop();
int main() {
    char postfix[20];
    int op1, op2, res, i;
    printf("Enter the postfix expression: ");
    scanf("%s", postfix);
    for (i = 0; postfix[i] != '\0'; i++) {
        if (isdigit(postfix[i]))
            push(postfix[i] - '0');
        else {
            op2 = pop();
            op1 = pop();
            switch (postfix[i]) {
                case '+': res = op1 + op2; break;
                case '-': res = op1 - op2; break;
                case '*': res = op1 * op2; break;
                case '/': res = op1 / op2; break;
                case '%': res = op1 % op2; break;
                case '^': res = pow(op1, op2); break;
            }
            push(res);
        }
    }
    printf("Result of postfix expression is: %d\n", pop());
    return 0;
}
void push(int ch) {
    s[++top] = ch;
}
int pop() {
    return (s[top--]);
}

queue

#include <stdio.h>
#include <stdlib.h>
#define MAX 3
int q[MAX], f = -1, r = -1;
void insert();
void rem();
void display();
int main() {
    int ch;
    do {
        printf("\n1.Insert\n2.Remove\n3.Display\n4.Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &ch);
        switch (ch) {
            case 1: insert(); break;
            case 2: rem(); break;
            case 3: display(); break;
            case 4: exit(0);
            default: printf("Invalid choice\n");
        }
    } while (ch != 4);
    return 0;
}
void insert() {
    int e;
    if (r == MAX - 1) {
        printf("Queue is full\n");
        return;
    }
    printf("Enter the element to be inserted: ");
    scanf("%d", &e);
    r = r + 1;
    q[r] = e;
    if (f == -1) f = 0;
}
void rem() {
    int e;
    if (f == -1) {
        printf("Queue is empty\n");
        return;
    }
    e = q[f];
    if (f == r) f = r = -1;
    else f = f + 1;
    printf("Deleted element is: %d\n", e);
}
void display() {
    int i;
    if (f == -1) {
        printf("Queue is empty\n");
        return;
    }
    printf("Elements of queue are: ");
    for (i = f; i <= r; i ++)
	 printf("%d\t",q[i]);
}

recur

#include<stdio.h>
int fibo(int);
int main()
{
    int i,num;
    printf("Enter the fibo num : ");
    scanf("%d",&num);
    printf("fibo seris : ");
    for(i=0;i<num;i++)
    {
        
    printf("%d\t",fibo(i));
    }
    return 0;
}
int fibo(int n)
{
    if (n == 0 || n == 1)
    return n;
    else
    return fibo( n - 1 ) + fibo( n - 2 );
}


#include<stdio.h>
void tower(int,char,char,char);
int main()
{
    int n;
    printf("Enter the no of disks : ");
    scanf("%d",&n);
    if(n==0)
    {
        printf("No disk found");
        return 0;
    }
    printf("Moves involve in tower of honai : \n");
    tower(n,'A','C','B');
    return 0;
}
void tower(int n ,char source ,char dest, char temp)
{
    if(n==1)
    {
        printf("Move %d disk from %c to %c \n",n,source,dest);
        return;
    }
    tower(n-1,source,temp,dest);
    printf("Move %d disk from %c to %c \n",n,source,dest);
    tower(n-1,temp,dest,source);
        return;
}

cqueue

#include <stdio.h>
#include <stdlib.h>
#define MAX 3
char cq[20];
int f = -1, r = -1;
void insert();
void del();
void display();
int main() {
    int ch;
    do {
        printf("1.insert\n2.delete\n3.display\n4.exit\n");
        printf("enter your choice:");
        scanf("%d", &ch);
        switch (ch) {
            case 1: insert(); break;
            case 2: del(); break;
            case 3: display(); break;
            case 4: exit(0);
            default: printf("invalid choice");
        }
    } while (ch != 4);
    return 0;
}
void insert() {
    char e;
    if ((r + 1) % MAX == f) {
        printf("cq is full");
        return;
    }
    printf("enter the item:");
    scanf(" %c", &e);  // give one space before %c
    r = (r + 1) % MAX;
    cq[r] = e;
    if (f == -1)
        f = 0;    
}
void del() {
    char e;
    if (f == -1) {
        printf("cq is empty");
        return;
    } else {
        e = cq[f];
        if (f == r)
            f = r = -1;
        else
            f = (f + 1) % MAX;
        printf("deleted item:%c", e);   
    }
}
void display() {
    int i;
    if (f == -1) {
        printf("cq is empty");
        return;
    } else {
        i = f;
        while (i != r) {
            printf("%c\n", cq[i]);
            i = (i + 1) % MAX;
        }
        printf("%c\n", cq[r]);
    }
}

SLL

#include <stdio.h>
#include <stdlib.h>
typedef struct NODE {
    char usn[10];
    char name[10];
    char branch[10];
    int sem;
    int phno;
    struct NODE *next;
} node;
node *first = NULL;
node* read_data();
void front_insert();
void front_del();
void end_insert();
void end_del();
void display();
int main() {
    int ch;
    do {
        printf("1.front_insert\n2.front_delete\n3.end_insert\n4.end_delete\n5.display\n6.exit\n");
        printf("enter your choice:");
        scanf("%d", &ch);
        switch (ch) {
            case 1: front_insert(); break;
            case 2: front_del(); break;
            case 3: end_insert(); break;
            case 4: end_del(); break;
            case 5: display(); break;
            case 6: exit(0);
            default: printf("invalid choice");
        }
    } while (ch != 6);
    return 0;
}
node* read_data() {
    node *nn;
    nn = (node *)malloc(sizeof(node));
    printf("enter the usn:");
    scanf("%s", nn->usn);
    printf("enter the name:");
    scanf("%s", nn->name);
    printf("enter the branch:");
    scanf("%s", nn->branch);
    printf("enter the semester:");
    scanf("%d", &nn->sem);
    printf("enter the phno:");
    scanf("%d", &nn->phno);
    nn->next = NULL;
    return nn;
}
void front_insert() {
    node *temp;
    temp = read_data();
    if (first == NULL)
        first = temp;
    else {
        temp->next = first;
        first = temp;
    }
}
void end_insert() {
    node *temp, *curr;
    temp = read_data();
    if (first == NULL)
        first = temp;
    else {
        curr = first;
        while (curr->next != NULL)
            curr = curr->next;
        curr->next = temp;
    }
}
void front_del() {
    node *temp;
    if (first == NULL)
        printf("list is empty\n");
    else {
        temp = first;
        first = first->next;
        free(temp);
    }
}
void end_del() {
    node *curr, *prev;
    if (first == NULL)
        printf("list is empty\n");
    if (first->next == NULL) {
        curr = first;
        first = NULL;
        free(curr);
    } else {
        curr = first;
        while (curr->next != NULL) {
            prev = curr;
            curr = curr->next;
        }
        prev->next = NULL;
        free(curr);
    }
}
void display() {
    int count = 0;
    node *temp;
    if (first == NULL)
        printf("list is empty");
    else {
        temp = first;
        while (temp != NULL) {
            printf("\nusn:%s", temp->usn);
            printf(" name:%s", temp->name);
            printf(" branch:%s", temp->branch);
            printf(" sem:%d", temp->sem);
            printf(" phno:%d\n", temp->phno);
            count++;
            temp = temp->next;
        }
        printf("no of nodes:%d", count);
    }
}

DLL

#include <stdio.h>
#include <stdlib.h>
typedef struct node {
    char ssn[10];
    char name[20];
    char dept[10];
    char des[10];
    int sal;
    char ph[11];
    struct node *left;
    struct node *right;
} node;
node *first = NULL;
node *readdata();
void frontinsert();
void endinsert();
void frontdel();
void enddel();
void display();
int main() {
    int ch;
    do {
        printf("1. insert front\n2. end insert\n3. delete front\n4. delete end\n5. display\n6. exit\n");
        printf("Enter your choice : ");
        scanf("%d", &ch);
        switch (ch) {
            case 1: frontinsert(); break;
            case 2: endinsert(); break;
            case 3: frontdel(); break;
            case 4: enddel(); break;
            case 5: display(); break;
            case 6: exit(0);
            default: printf("Invalid choice\n");
        }
    } while (ch != 6);
    return 0;
}
node* readdata() {
    node *nn;
    nn = (node*)malloc(sizeof(node));
    printf("Enter SSN of employee: ");
    scanf("%s", nn->ssn);
    printf("Enter name: ");
    scanf("%s", nn->name);
    printf("Enter department: ");
    scanf("%s", nn->dept);
    printf("Enter designation: ");
    scanf("%s", nn->des);
    printf("Enter salary: ");
    scanf("%d", &nn->sal);
    printf("Enter phone number: ");
    scanf("%s", nn->ph);
    nn->left = NULL;
    nn->right = NULL;
    return nn;
}
void frontinsert() {
    node *temp;
    temp = readdata();
    if (first == NULL)
        first = temp;
    else {
        temp->right = first;
        first->left = temp;
        first = temp;
    }
}
void endinsert() {
    node *temp, *curr;
    temp = readdata();
    if (first == NULL)
        first = temp;
    else {
        curr = first;
        while (curr->right != NULL)
            curr = curr->right;
        curr->right = temp;
        temp->left = curr;
    }
}
void frontdel() {
    node *temp;
    if (first == NULL)
        printf("List is empty\n");
    else if (first->right == NULL) {
        temp = first;
        first = NULL;
        free(temp);
    } else {
        temp = first;
        first = first->right;
        first->left = NULL;
        free(temp);
    }
}
void enddel() {
    node *temp, *prev, *curr;
    if (first == NULL) {
        printf("List is empty\n");
    } else if (first->right == NULL) {
        temp = first;
        first = NULL;
        free(temp);
    } else {
        prev = curr = first;
        while (curr->right != NULL) {
            prev = curr;
            curr = curr->right;
        }
        free(curr);
        prev->right = NULL;
    }
}
void display() {
    node *temp;
    int n = 0;
    if (first == NULL) {
        printf("List is empty\n");
    } else {
        temp = first;
        while (temp != NULL) {
            printf("SSN: %s\n", temp->ssn);
            printf("Name: %s\n", temp->name);
            printf("Department: %s\n", temp->dept);
            printf("Designation: %s\n", temp->des);
            printf("Salary: %d\n", temp->sal);
            printf("Phone number: %s\n", temp->ph);
            n++;
            temp = temp->right;
        }
        printf("Number of nodes: %d\n", n);
    }
}

Btree

#include <stdio.h>
#include <stdlib.h>
typedef struct NODE {
    int info;
    struct NODE *lchild;
    struct NODE *rchild;
} node;
node *root = NULL;
void create();
node* insert(int);
void preorder(node*);
void inorder(node*);
void postorder(node*);
int search(node*, int);
int main() {
    int ch, key, flag = 0;
    do {
        printf("\n1. create\n2. preorder\n3. inorder\n4. postorder\n5. search\n6. exit\n");
        printf("Enter your choice: ");
        scanf("%d", &ch);
        switch (ch) {
            case 1: create(); break;
            case 2: preorder(root); break;
            case 3: inorder(root); break;
            case 4: postorder(root); break;
            case 5:
                printf("Enter the search key: ");
                scanf("%d", &key);
                flag = search(root, key);
                if (flag == 1)
                    printf("Element is found\n");
                else
                    printf("Not found\n");
                break;
            case 6: exit(0);
            default: printf("Invalid choice\n");
        }
    } while (ch != 6);
    return 0;
}
void create() {
    int i, n, e;
    printf("Enter the number of nodes: ");
    scanf("%d", &n);
    printf("Enter the elements:\n");
    for (i = 0; i < n; i++) {
        scanf("%d", &e);
        root = insert(e);
    }
    printf("Tree constructed\n");
}
node* insert(int e) {
    node *nn, *prev, *temp;
    nn = (node*)malloc(sizeof(node));
    nn->rchild = NULL;
    nn->lchild = NULL;
    nn->info = e;
    if (root == NULL) {
        root = nn;
        return root;
    } else {
        temp = root;
        while (temp != NULL) {
            prev = temp;
            if (temp->info > nn->info)
                temp = temp->lchild;
            else if (temp->info < nn->info)
                temp = temp->rchild;
            else {
                printf("Duplicate\n");
                return root;
            }
        }
        if (prev->info < nn->info)
            prev->rchild = nn;
        else
            prev->lchild = nn;
        return root;
    }
}
void preorder(node *tree) {
    if (tree == NULL)
        return;
    printf("%d ", tree->info);
    preorder(tree->lchild);
    preorder(tree->rchild);
}
void postorder(node *tree) {
    if (tree == NULL)
        return;
    postorder(tree->lchild);
    postorder(tree->rchild);
    printf("%d ", tree->info);
}
void inorder(node *tree) {
    if (tree == NULL)
        return;
    inorder(tree->lchild);
    printf("%d ", tree->info);
    inorder(tree->rchild);
}
int search(node *root, int e) {
    if (root == NULL) {
        return 0;
    } else if (root->info == e) {
        return 1;
    } else if (root->info > e) {
        return search(root->lchild, e);
    } else {
        return search(root->rchild, e);
    }
}

hash 

#include<stdio.h>
#include<stdlib.h>
#define MAX 100
int a[MAX],num,key,i;
int create(int);
void linear_prob(int[],int,int);
void display(int[]);
int main()
{
int j;
printf("\ncollision handling by linear probing");
for(i=10;i<MAX;i++)
a[i]=-1;
do
{
printf("enter four digit number:");
scanf("%d",&num);
key=create(num);
linear_prob(a,key,num);
printf("\ndo you want to continue ? (0/1)");
scanf("%d",&j);
}while(j==1);
display(a);
return 0;
}
int create(int num)
{
key=num%100;
return key;
}
void linear_prob(int a[MAX],int key,int num)
{
int flag,count;
flag=count;
if(a[key]==-1)
a[key]=num;
else
{
i=10;
while(i<MAX-10)
{
if(a[i]!=-1)
count++;
i++;
}
if(count==MAX-10)
{
printf("\nhash table is full");
display(a);
exit(1);
}
for(i=key+1;i<MAX;i++)
{
if(a[i]==-1)
{
a[i]=num;
flag=1;
break;
}
}
for(i=10;i<key&&flag==0;i++)
{
if(a[i]==-1)
{
a[i]=num;
flag=1;
break;
}
}
}
}
void display(int a[MAX])
{
printf("\nthe hash table is...\n");
for(i=10;i<MAX;i++)
printf("\n %d %d",i,a[i]);
}
